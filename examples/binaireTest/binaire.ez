/*_________________________________________________________

Test functions
log normal adaptive mutation
Selection operator: Tournament
__________________________________________________________*/

\User declarations :
#define SIZE 10
#define X_MIN 0
#define X_MAX 2
#define ITER 120      
#define Abs(x) ((x) < 0 ? -(x) : (x))
#define MAX(x,y) ((x)>(y)?(x):(y))
#define MIN(x,y) ((x)<(y)?(x):(y))
#define SIGMA  1.                     /*  mutation parameter */
#define PI 3.141592654

 
float pMutPerGene=0.1;

\end

\User functions:

#include "CAEData.h"
AEData dat;

#include <math.h>
 
\end
     

\User CUDA:
\end

\Before everything else function:
{
}
\end

\After everything else function:
  //cout << "After everything else function called" << endl;
\end

\At the beginning of each generation function:

  for(size_t i=0 ; i< EA->population->parentPopulationSize ; i++)
  {
     
     std::string genome = EA->population->parents[i]->serialize();
     

     dat.add_individu( genome);
  }

 


\end

\At each generation before reduce function:
  //cout << "At each generation before replacement function called" << endl;
\end

\User classes :

GenomeClass { 
  int x[SIZE];
}
\end

\GenomeClass::display:

\end

\GenomeClass::initialiser : // "initializer" is also accepted
  for(int i=0; i<SIZE; i++ ) {
     	Genome.x[i] = (int)random(X_MIN,X_MAX);
	}
\end

\GenomeClass::crossover :
    int alpha = (int)random(0,SIZE-1); 
     for(int i=0; i<alpha; i++ ) {
     	child.x[i] = parent1.x[i];
	}
     for(int i=alpha+1; i<SIZE; i++ ) {
     	child.x[i] = parent2.x[i];
	}

\end

\GenomeClass::mutator : // Must return the number of mutations
  int NbMut=0;

    for (int i=0; i<SIZE; i++)
    if (tossCoin(pMutPerGene)){
    	NbMut++;
       	Genome.x[i] = 1-Genome.x[i];
    	}


return NbMut;
\end

\GenomeClass::evaluator : // Returns the score
{
  int Score= 0;
  for(int i=1; i<SIZE; i++ ) {
     	Score+=(1-Genome.x[i-1])*Genome.x[i] ;
	}

        
  return Score;
}
\end

\User Makefile options: 
CXXFLAGS+=-I/usr/local/cuda/common/inc/ -I/usr/local/cuda/include/ -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include
LDFLAGS+=-lgfal_pthr -llcg_util
\end

\Default run parameters :        // Please let the parameters appear in this order
  Number of generations : 5   	// NB_GEN
  Time limit: 0 			// In seconds, 0 to deactivate
  Population size : 20			//POP_SIZE
  Offspring size : 20 // 40% 
  Mutation probability : 0.5       // MUT_PROB
  Crossover probability : 0.5      // XOVER_PROB
  Evaluator goal : minimise      // Maximise
  Selection operator: Tournament 2.0
  Surviving parents: 100%//perceor absolute  
  Surviving offspring: 100%
  Reduce parents operator: Tournament 2
  Reduce offspring operator: Tournament 2
  Final reduce operator: Tournament 2

  Elitism: Strong			//Weak or Strong
  Elite: 1
  Print stats: true				//Default: 1
  Generate csv stats file:false
  Generate Ind.csv stats file:true			
  Generate gnuplot script:false
  Generate R script:false
  Plot stats:false				//Default: 0

  Remote island model: false
 
\end
	
