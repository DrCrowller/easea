{"name":"Easea","tagline":"EASEA (EAsy Specification of Evolutionary Algorithms) is an Artificial Evolution platform developped  by the SONIC (Stochastic Optimisation and Nature Inspired Computing) group of the BFO team at Université de Strasbourg.","body":"The EASEA-CLOUD platform\r\n========================\r\n\r\nOverview\r\n--------------\r\nEASEA and EASEA-CLOUD are Free Open Source Software (under GNU Affero v3 General Public License) developed by the SONIC (Stochastic Optimisation and Nature Inspired Computing) group of the BFO team at Université de Strasbourg. Through the Strasbourg Complex Systems Digital Campus, the platforms are shared with the UNESCO CS-DC UniTwin and E-laboratory on Complex Computational Ecosystems (ECCE).\r\n\r\nEASEA (EAsy Specification of Evolutionary Algorithms) is an Artificial Evolution platform that allows scientists with only basic skills in computer science to implement evolutionary algorithms and to exploit the massive parallelism of many-core architectures in order to optimize virtually any real-world problems (continous, discrete, combinatorial, mixed and more (with Genetic Programming)), typically allowing for speedups up to x500 on a $3,000 machine, depending on the complexity of the evaluation function of the inverse problem to be solved.\r\n\r\nThen, for very large problems, EASEA can also exploit computational ecosystems as it can parallelize (using an embedded island model) over loosely coupled heterogenous machines (Windows, Linux or Macintosh, with or without GPGPU cards, provided that they have internet access) a grid of computers or a Cloud.\r\n\r\nFeatures\r\n--------------\r\n\r\n- Runs can be distributed over cluster of homogeneous AND heterogeneous machines.\r\n- Distribution can be done locally on the same machine or over the internet (using a embedded island model).\r\n- Parallelization over GPGPU cards leading to massive speedup (x100 to x1000).\r\n- C++ description language.\r\n\r\nBuilding easea\r\n--------------\r\nEasea can be build using two method.\r\n\r\n1) By GNU Makefile:\r\n```  \r\n  $ make\r\n  $ . install.sh [local]  \r\n```\r\n2) By CMake:\r\n```\r\n  $ cmake .\r\n  $ make\r\n  $ . install.sh [local] \r\n```\r\n\".\" is equivalent to \"source\".\r\n\r\nEasea can either be installed locally without special permission or in \r\n/usr/local/ with root permissions.\r\n\r\nOnce installed, one can test its installation by compiling easea test programs\r\nin example/ :\r\n```\r\n$ cd example/weierstrass\r\n$ easea weierstrass.ez\r\n$ make \r\n$ ./weierstrass\r\n```\r\nTo print all options available type:\r\n```\r\n$ ./weierstrass --help\r\n```\r\nTo test the CUDA version (Need the CUDA developper kit found at\r\nhttps://developer.nvidia.com/cuda-downloads ):\r\n```\r\n$ easea -cuda weierstrass.ez\r\n```\r\nDocumentation\r\n--------------\r\nFor additional help and documentation about the EASEA platform, please refers \r\nto the main wiki http://easea.unistra.fr/\r\n\r\nTo get the latest version of EASEA, git clone this repository or the sourceforge one: <br>\r\ngit clone git://git.code.sf.net/p/easea/code easea-code\r\n\r\nThat's all !\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}