/*_________________________________________________________

Test functions
log normal adaptive mutation
Selection operator: Tournament
__________________________________________________________*/

\User declarations :
#define SIZE 10
		#define X_MIN -1.
#define X_MAX 1.
#define ITER 50      
#define Abs(x) ((x) < 0 ? -(x) : (x))
#define MAX(x,y) ((x)>(y)?(x):(y))
#define MIN(x,y) ((x)<(y)?(x):(y))
#define SIGMA  1.                     /*  mutation parameter */
#define PI 3.141592654

 
float pMutPerGene=0.1;
#define N_LIM 10
int n = N_LIM;


EvalCounter* d_counter;
struct gpuOptions{
  EvalCounter* counter;
};

\end

\User functions:
//fitness function
#include <math.h>


__device__ __host__ inline float Weierstrass(float x[SIZE], int n)  // Weierstrass multimidmensionnel h = 0.25
{
   float res = 0.;
   float val[SIZE];
   float b=2.;
   float h = 0.25;

   for (int i = 0;i<n; i++) {
	val[i] = 0.;
    	for (int k=0;k<ITER;k++)
		val[i] += pow(b,-(float)k*h) * sin(pow(b,(float)k)*x[i]);
	res += Abs(val[i]);
	}
   return (res);
} 

float gauss()
/* Generates a normally distributed random value with variance 1 and 0 mean.
    Algorithm based on "gasdev" from Numerical recipes' pg. 203. */
{
  int iset = 0;
  float gset = 0.0;
  float v1 = 0.0, v2 = 0.0, r = 0.0;
  float factor = 0.0;

  if (iset) {
        iset = 0;
        return gset;
      	}
  else {    
        do {
            v1 = (float)globalRandomGenerator->randFloat(0.,1.) * 2.0 - 1.0;
            v2 = (float)globalRandomGenerator->randFloat(0.,1.) * 2.0 - 1.0;
            r = v1 * v1 + v2 * v2;
	                }
        while (r > 1.0);
        factor = sqrt (-2.0 * log (r) / r);
        gset = v1 * factor;
        iset = 1;
        return (v2 * factor);
    	}
}
\end

\GenomeClass::display:
	 for( size_t i=0 ; i<SIZE ; i++){
	      //     cout << Genome.x[i] << ":" << Genome.sigma[i] << "|";
	      printf("%.02f:%.02f|",Genome.x[i],Genome.sigma[i]);
	 }	      
\end
\Initialisation function:

  std::cout<<"*************  n: "<<n<<std::endl;
EvalCounter counter;
counter.a = 0;
d_counter = counter.cudaSendToGpuEvalCounter();
initOpts.counter=d_counter;

\end

\Finalization function:
{
  cout << "finalization function called" << endl;
  EvalCounter counter;
  counter.cudaGetFromGpuEvalCounter(d_counter);
  cout << counter << endl;
}
\end

\User classes :
EvalCounter {
  int a;
}

GenomeClass { 
  float x[SIZE];
  float sigma[SIZE]; // auto-adaptative mutation parameter
}
\end

\GenomeClass::initialiser : // "initializer" is also accepted
  for(int i=0; i<n; i++ ) {
     	Genome.x[i] = (float)random(X_MIN,X_MAX);
	Genome.sigma[i]=(float)random(0.,0.5);
	}
\end

\GenomeClass::crossover :
  for (int i=0; i<n; i++)
  {
     float alpha = (float)globalRandomGenerator->getRandomIntMax(1.); // barycentric crossover
     child1.x[i] = alpha*parent1.x[i] + (1.-alpha)*parent2.x[i];
  }
\end

\GenomeClass::mutator : // Must return the number of mutations
  int NbMut=0;
  float pond = 1./sqrt((float)n);

    for (int i=0; i<n; i++)
    if (tossCoin(pMutPerGene)){
    	NbMut++;
       	Genome.sigma[i] = Genome.sigma[i] * exp(SIGMA*pond*(float)gauss());
       	Genome.sigma[i] = MIN(0.5,Genome.sigma[0]);              
       	Genome.sigma[i] = MAX(0.,Genome.sigma[0]);
       	Genome.x[i] += Genome.sigma[i]*(float)gauss();
       	Genome.x[i] = MIN(X_MAX,Genome.x[i]);              // pour eviter les depassements
       	Genome.x[i] = MAX(X_MIN,Genome.x[i]);
    	}
return NbMut;
\end

\GenomeClass::evaluator : // Returns the score
  float Score= 0.0;
  float Point[SIZE];
  for (int i=0; i<N_LIM; i++) Point[i] = Genome.x[i];
  Score= Weierstrass(Point, N_LIM);         
/*   initOpts.counter->a+=2; */
  return Score;
\end

\User Makefile options: 
CPPFLAGS+=
\end

\Default run parameters :        // Please let the parameters appear in this order
 Number of generations : 100     // NB_GEN
  Mutation probability : 1       // MUT_PROB
  Crossover probability : 1      // XOVER_PROB
  Population size : 10     // POP_SIZE
  Genitors selector: Tournament 2
  Final reduce: Tournament 2

		    	   //  Selection operator : Tournament // RouletteWheel, Deterministic, Ranking, Random
  Offspring size : 80% // 40% 
		   //Replacement strategy : Plus    // Comma, SteadyState, Generational
		   //  Discarding operator : Worst    // Best, Tournament, Parent, Random
  Evaluator goal : Minimise      // Maximise
  Elitism: Strong
  Elite: 1
\end
	
